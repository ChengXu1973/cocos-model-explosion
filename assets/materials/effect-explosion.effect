CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: explosion-vs:vert
      frag: explosion-fs:frag
      properties: &props
        mainTexture:    { value: white }
        mainColor:      { value: [1, 1, 1, 1], editor: { type: color } }
  - name: transparent
    passes:
    - vert: explosion-vs:vert
      frag: explosion-fs:frag
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
}%

CCProgram explosion-vs %{
  precision highp float;

  #include <legacy/input-standard>
  #include <builtin/uniforms/cc-global>
  #include <legacy/decode-base>
  #include <legacy/local-batch>

  #if CC_USE_MORPH
  #else
    #if __VERSION__ < 450
      in float a_vertexId;
      int getVertexId() {
        return int(a_vertexId);
      }
    #else
      int getVertexId() {
        return gl_VertexIndex; // vulkan convension
      }
    #endif
  #endif

  out vec2 v_uv;
  // out vec4 v_color;

  uniform sampler2D vertexTexture;
  uniform sampler2D indiceTexture;

  uniform VsConstant {
    vec4 modelSize;
    vec4 minPos;
    vec4 textureSize;
    vec4 animParam;
  };

  vec4 getPositionByIndex(float index) {
    float row = floor(index * textureSize.z);
    float col = mod(index, textureSize.x);
    float u = (col + 0.5) * textureSize.z;
    float v = (row + 0.5) * textureSize.w;
    return texture(vertexTexture, vec2(u, v));
  }

  vec4 vert () {
    StandardVertInput In;
    CCVertInput(In);

    mat4 matWorld;
    CCGetWorldMatrix(matWorld);

    v_uv = a_texCoord;
    #if FLIP_UV
      CC_HANDLE_RT_SAMPLE_FLIP(v_uv);
    #endif

    vec4 position = In.position;

    int vid = getVertexId();
    float tid = float(vid) - mod(float(vid), 3.0);

    vec3 center = getPositionByIndex(tid).xyz;
    center += getPositionByIndex(tid + 1.0).xyz;
    center += getPositionByIndex(tid + 2.0).xyz;
    center *= 0.33333;

    vec3 pos = center * modelSize.xyz;
    pos += minPos.xyz;
    
    vec3 dir = pos - (modelSize * 0.5 + minPos).xyz;
    dir = normalize(dir);

    // move by normal

    // move by target

    // move back by normal

    // v_color = vec4(0.0, 0.0, 0.0, 1.0);
    // if (vid == 1) {
    //   v_color.r = 1.0;
    // }

    position += vec4(dir * 0.5, 0.0);
    return cc_matProj * (cc_matView * matWorld) * position;
  }
}%

CCProgram explosion-fs %{
  precision highp float;
  #include <legacy/output>

  in vec2 v_uv;
  // in vec4 v_color;

  uniform sampler2D mainTexture;

  uniform FsConstant {
    vec4 mainColor;
  };

  vec4 frag () {
    vec4 col = mainColor * texture(mainTexture, v_uv);
    // vec4 col = v_color;
    return CCFragOutput(col);
  }
}%
