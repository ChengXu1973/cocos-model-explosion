CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: explosion-vs:vert
      frag: explosion-fs:frag
      properties: &props
        mainTexture:    { value: white }
        modelTexture:   { value: white }
        mainColor:      { value: [1, 1, 1, 1], editor: { type: color } }
  - name: transparent
    passes:
    - vert: explosion-vs:vert
      frag: explosion-fs:frag
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
}%


CCProgram explosion-vs %{
  precision highp float;

  #include <legacy/input>
  #include <builtin/uniforms/cc-global>
  #include <legacy/decode-base>
  #include <legacy/local-batch>
  #include <legacy/input>

  out vec4 v_color;
  out vec2 v_uv;

  uniform sampler2D modelTexture;

  #define WIDTH 512
  #define HEIGHT 512

  vec4 getVertex(int col, int row) {
    float u = (float(col) + 0.5) / float(WIDTH);
    float v = (float(row) + 0.5) / float(HEIGHT);
    return texture(modelTexture, vec2(u, v));
  }

  #if CC_USE_MORPH
  #else
  #if __VERSION__ < 450
      in float a_vertexId;
      int getVertexId() {
        return int(a_vertexId);
      }
    #else
      int getVertexId() {
        return gl_VertexIndex; // vulkan convension
      }
    #endif
  #endif

  vec4 vert () {
    vec4 position;
    CCVertInput(position);

    mat4 matWorld;
    CCGetWorldMatrix(matWorld);

    v_uv = a_texCoord;
    #if FLIP_UV
      CC_HANDLE_RT_SAMPLE_FLIP(v_uv);
    #endif

    v_color = vec4(1.0, 1.0, 1.0, 1.0);

    int index = getVertexId();
    int row = index / int(WIDTH);
    float col = mod(float(index), float(WIDTH));
    vec4 point = getVertex(int(col), row);
    v_color = point;

    return cc_matProj * (cc_matView * matWorld) * position;
  }
}%

CCProgram explosion-fs %{
  precision highp float;
  #include <legacy/output>

  in vec2 v_uv;
  in vec3 v_position;
  in vec4 v_color;

  uniform sampler2D mainTexture;
  uniform sampler2D modelTexture;

  uniform Constant {
    vec4 mainColor;
  };

  vec4 frag () {
    vec4 col = v_color * mainColor * texture(mainTexture, v_uv);
    return CCFragOutput(col);
  }
}%
